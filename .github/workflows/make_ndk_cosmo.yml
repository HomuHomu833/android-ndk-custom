name: Make NDK (Cosmopolitan Libc)
run-name: Make NDK-r${{inputs.version}}${{inputs.revision}} cosmo
on:
  workflow_dispatch:
    inputs:
      version:
        description: "NDK Release version:"
        default: '29'
        required: true
        type: string
      revision:
        description: "NDK Release revision:"
        default: ''
        required: false
        type: string

jobs:
  build-extra:
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-unknown-cosmo, x86_64-unknown-cosmo]
    runs-on: ubuntu-22.04
    env:
      ROOTDIR: ${{github.workspace}}
      TARGET_BUILD_DIR: ${{github.workspace}}/build/${{matrix.target}}
      TARGET_INSTALL_DIR: ${{github.workspace}}/output/${{matrix.target}}
      MODE: tiny
      CC: ${{matrix.target}}-cc
      CXX: ${{matrix.target}}-c++
      LD: ${{matrix.target}}-ld
      OBJCOPY: ${{matrix.target}}-objcopy
      AR: ${{matrix.target}}-ar
      STRIP: ${{matrix.target}}-strip
    steps:
      - name: Checkout android-ndk-custom
        uses: actions/checkout@v5
        with:
          path: ${{github.workspace}}

      - name: Setup cosmo toolchain
        uses: bjia56/setup-cosmocc@v0.0.5
        with:
          version: "4.0.2"

      - name: Get Official NDK
        run: |
          echo "Downloading NDK r${{inputs.version}}${{inputs.revision}}..."
          curl -sSfL -o android-ndk.zip "https://dl.google.com/android/repository/android-ndk-r${{inputs.version}}${{inputs.revision}}-linux.zip"
          unzip -qq android-ndk.zip -d ${{ runner.temp }}

      - name: Install Dependencies
        run: sudo apt update && sudo apt install -y ninja-build cmake qemu-user-static

      - name: Build Extra Dependencies
        run: |
          TOOLCHAIN="${{ runner.temp }}/cosmocc-4.0.2"
          NDK_DIR="${{ runner.temp }}/android-ndk-r${{inputs.version}}${{inputs.revision}}"
          SHADER_TOOLS_BIN="$NDK_DIR/shader-tools/linux-x86_64"
          PREBUILT_BIN="$NDK_DIR/prebuilt/linux-x86_64/bin"
          # MAKE_VERSION=$($PREBUILT_BIN/make --version | sed -n '1s/.*GNU Make \([0-9]*\.[0-9]*\).*/\1/p')
          MAKE_VERSION=4.4
          YASM_VERSION=$($PREBUILT_BIN/yasm --version | sed -n '1s/.*yasm \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p')
          SHADERC_HASH=$(curl -LkSs "https://android.googlesource.com/platform/external/shaderc/shaderc/+/refs/tags/$($SHADER_TOOLS_BIN/glslc --version | sed -n 's/.*\(ndk-[^ ]*\).*/\1/p' | sed 's/+/%2B/g' | head -n 1)" | grep -oP 'href="/platform/external/shaderc/shaderc/\+archive/[a-f0-9]{40}\.tar\.gz"' | sed -E 's/^href="\/platform\/external\/shaderc\/shaderc\/\+archive\///' | sed 's/\.tar\.gz"$//')
          SPIRV_TOOLS_HASH=$(curl -LkSs "https://android.googlesource.com/platform/external/shaderc/spirv-tools/+/refs/tags/$($SHADER_TOOLS_BIN/glslc --version | sed -n 's/.*\(ndk-[^ ]*\).*/\1/p' | sed 's/+/%2B/g' | head -n 1)" | grep -oP 'href="/platform/external/shaderc/spirv-tools/\+archive/[a-f0-9]{40}\.tar\.gz"' | sed -E 's/^href="\/platform\/external\/shaderc\/spirv-tools\/\+archive\///' | sed 's/\.tar\.gz"$//')
          SPIRV_HEADERS_HASH=$(curl -LkSs "https://android.googlesource.com/platform/external/shaderc/spirv-headers/+/refs/tags/$($SHADER_TOOLS_BIN/glslc --version | sed -n 's/.*\(ndk-[^ ]*\).*/\1/p' | sed 's/+/%2B/g' | head -n 1)" | grep -oP 'href="/platform/external/shaderc/spirv-headers/\+archive/[a-f0-9]{40}\.tar\.gz"' | sed -E 's/^href="\/platform\/external\/shaderc\/spirv-headers\/\+archive\///' | sed 's/\.tar\.gz"$//')
          GLSLANG_HASH=$(curl -LkSs "https://android.googlesource.com/platform/external/shaderc/glslang/+/refs/tags/$($SHADER_TOOLS_BIN/glslc --version | sed -n 's/.*\(ndk-[^ ]*\).*/\1/p' | sed 's/+/%2B/g' | head -n 1)" | grep -oP 'href="/platform/external/shaderc/glslang/\+archive/[a-f0-9]{40}\.tar\.gz"' | sed -E 's/^href="\/platform\/external\/shaderc\/glslang\/\+archive\///' | sed 's/\.tar\.gz"$//')

          cd $HOME
          # GNU Make
          cat $ROOTDIR/sources/make-$MAKE_VERSION.tar.gz | gzip -d | tar -x
          mv make-$MAKE_VERSION make
          cd make
          cp $ROOTDIR/config/config.sub build-aux
          cp $ROOTDIR/config/config.guess build-aux
          ./configure \
          --prefix="$HOME/build-${{ matrix.target }}" \
          --build=${{ matrix.target }} \
          --host=x86_64-linux-gnu \
          CC=${TOOLCHAIN}/bin/${{ matrix.target }}-cc \
          CXX=${TOOLCHAIN}/bin/${{ matrix.target }}-c++ \
          LD=${TOOLCHAIN}/bin/${{ matrix.target }}-ld \
          OBJCOPY=${TOOLCHAIN}/bin/${{ matrix.target }}-objcopy \
          AR=${TOOLCHAIN}/bin/${{ matrix.target }}-ar \
          CFLAGS="-static" \
          CXXFLAGS="-static" \
          LDFLAGS="-static"
          make -j"$(nproc --all)" install

          cd $HOME
          # YASM
          cat $ROOTDIR/sources/yasm-$YASM_VERSION.tar.gz | gzip -d | tar -x
          mv yasm-$YASM_VERSION yasm
          cd yasm
          cp $ROOTDIR/config/config.sub config
          cp $ROOTDIR/config/config.guess config
          cp $ROOTDIR/patches/cosmo/libyasm/strsep.c libyasm/strsep.c
          ./configure \
          --prefix="$HOME/build-${{ matrix.target }}" \
          --build=${{ matrix.target }} \
          --host=x86_64-linux-gnu \
          --disable-nls \
          CC=${TOOLCHAIN}/bin/${{ matrix.target }}-cc \
          CXX=${TOOLCHAIN}/bin/${{ matrix.target }}-c++ \
          LD=${TOOLCHAIN}/bin/${{ matrix.target }}-ld \
          OBJCOPY=${TOOLCHAIN}/bin/${{ matrix.target }}-objcopy \
          AR=${TOOLCHAIN}/bin/${{ matrix.target }}-ar \
          CFLAGS="-static" \
          CXXFLAGS="-static" \
          LDFLAGS="-static"
          make -j"$(nproc --all)" install

          cd $HOME
          # SPIRV-Tools and shaderc
          mkdir -p "$HOME/shaderc"
          cd "$HOME/shaderc"
          curl -LkSs "https://android.googlesource.com/platform/external/shaderc/shaderc/+archive/$SHADERC_HASH.tar.gz" | tar -xz
          cd "$HOME/shaderc/third_party"
          mkdir -p spirv-tools
          cd spirv-tools
          curl -LkSs "https://android.googlesource.com/platform/external/shaderc/spirv-tools/+archive/$SPIRV_TOOLS_HASH.tar.gz" | tar -xz
          cd "$HOME/shaderc/third_party/spirv-tools/external"
          mkdir -p spirv-headers
          cd spirv-headers
          curl -LkSs "https://android.googlesource.com/platform/external/shaderc/spirv-headers/+archive/$SPIRV_HEADERS_HASH.tar.gz" | tar -xz
          cd "$HOME/shaderc/third_party"
          mkdir -p glslang
          cd glslang
          curl -LkSs "https://android.googlesource.com/platform/external/shaderc/glslang/+archive/$GLSLANG_HASH.tar.gz" | tar -xz
          cd "$HOME/shaderc/third_party/spirv-tools"
          git init --quiet
          git apply $ROOTDIR/patches/ndk/spirv/full_static.patch
          rm -rf .git
          cd "$HOME/shaderc"
          git init --quiet
          git apply $ROOTDIR/patches/ndk/shaderc/full_static.patch
          rm -rf .git
          sed -i 's/std::alignment_of<T>::value/alignof(T)/g' $HOME/shaderc/third_party/spirv-tools/source/util/small_vector.h
          cmake -S "$HOME/shaderc" -B "$HOME/shaderc/build" -G Ninja \
            -DCMAKE_INSTALL_PREFIX="$HOME/build-${{ matrix.target }}" \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DCMAKE_C_COMPILER="${TOOLCHAIN}/bin/${{matrix.target}}-cc" \
            -DCMAKE_CXX_COMPILER="${TOOLCHAIN}/bin/${{matrix.target}}-c++" \
            -DCMAKE_ASM_COMPILER="${TOOLCHAIN}/bin/${{matrix.target}}-cc" \
            -DCMAKE_LINKER="${TOOLCHAIN}/bin/${{matrix.target}}-ld" \
            -DCMAKE_OBJCOPY="${TOOLCHAIN}/bin/${{matrix.target}}-objcopy" \
            -DCMAKE_AR="${TOOLCHAIN}/bin/${{matrix.target}}-ar" \
            -DCMAKE_C_FLAGS="-static" \
            -DCMAKE_CXX_FLAGS="-static" \
            -DCMAKE_EXE_LINKER_FLAGS="-static" \
            -DSHADERC_SKIP_TESTS=ON \
            -DSHADERC_SKIP_EXAMPLES=ON \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5
          cmake --build "$HOME/shaderc/build" --target install

      - uses: actions/upload-artifact@v4.6.2
        with:
          name: extra-deps-${{ matrix.target }}
          path: "~/build-${{ matrix.target }}"

  ape-link:
    needs: [build-extra]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: "~/"

      - uses: geekyeggo/delete-artifact@v5.1.0
        with:
          name: extra-deps-*

      - name: Setup cosmo toolchain
        uses: bjia56/setup-cosmocc@v0.0.3
        with:
          version: "4.0.2"

      - name: Link APE
        run: |
          COSMO=$(dirname "$(dirname "$(command -v cosmocc)")")

          mkdir -p $HOME/build
          find $HOME/extra-deps-x86_64-unknown-cosmo/bin -type l,f | while IFS= read -r file; do
            bname=$(basename "${file}")

            if ! file "${file}" | grep -q "ASCII text executable"; then
              # echo "fixupobj ${bname}"
              fixupobj "$HOME/extra-deps-x86_64-unknown-cosmo/bin/${bname}"
              fixupobj "$HOME/extra-deps-aarch64-unknown-cosmo/bin/${bname}"

              echo "apelink ${bname}"
              apelink -V -1 \
                -l "${COSMO}/bin/ape-x86_64.elf" \
                -l "${COSMO}/bin/ape-aarch64.elf" \
                -M "${COSMO}/bin/ape-m1.c" \
                -o "$HOME/build/${bname}" \
                -s \
                "$HOME/extra-deps-x86_64-unknown-cosmo/bin/${bname}" \
                "$HOME/extra-deps-aarch64-unknown-cosmo/bin/${bname}"
            fi
          done

      - uses: actions/upload-artifact@v4.6.2
        with:
          name: extra-deps
          path: "~/build/*"

  make:
    needs: [ape-link]
    name: Make NDK Cosmo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout android-ndk-custom
        uses: actions/checkout@v5
        with:
          path: ${{github.workspace}}

      - uses: actions/download-artifact@v5
        with:
          path: "~/"

      - uses: geekyeggo/delete-artifact@v5.1.0
        with:
          name: extra-deps

      - name: Get NDK and LLVM
        run: |
          curl -LkSs https://dl.google.com/android/repository/android-ndk-r${{inputs.version}}${{inputs.revision}}-linux.zip >ndk.zip && unzip -q ndk.zip
          curl -LkSs https://github.com/${{ github.repository_owner }}/llvm-custom/releases/download/llvm-r${{inputs.version}}/bolt+clang+clang-tools-extra+lld-r${{inputs.version}}${{inputs.revision}}-ape.tar.xz | tar -xJf -

      - name: Make NDK Cosmo
        run: |
          NDK="${PWD}/android-ndk-r${{inputs.version}}${{inputs.revision}}"
          HOST_TOOLCHAIN="${PWD}/bolt+clang+clang-tools-extra+lld-r${{inputs.version}}${{inputs.revision}}-ape"
          NDK_TOOLCHAIN="${NDK}/toolchains/llvm/prebuilt/linux-x86_64"

          find "${NDK_TOOLCHAIN}/bin" -type f | while IFS= read -r file; do
              bname="$(basename "${file}")"
              if [ -f "${HOST_TOOLCHAIN}/bin/${bname}" ] && file "${file}" | grep -q 'ELF'; then
                  echo "Replacing ${bname}"
                  cp "${HOST_TOOLCHAIN}/bin/${bname}" "${file}"
              elif file "${file}" | grep -q 'Bourne-Again shell script'; then
                  echo "Replacing SheBang ${bname}"
                  sed -i 's,#!/usr/bin/env bash,#!/usr/bin/env sh,' "${file}"
              elif ! file "${file}" | grep -Eq 'Python script|Perl script|ASCII text'; then
                  echo "Removing ${bname}"
                  rm ${file}
              fi
          done

          sed -i 's,#!/usr/bin/env bash,#!/usr/bin/env sh,' "${NDK}/build/tools/ndk_bin_common.sh" "${NDK}/build/tools/make_standalone_toolchain.py" "${NDK}/build/ndk-build"
          sed -i 's,#!/bin/bash,#!/bin/sh,' "${NDK}/prebuilt/linux-x86_64/bin/ndk-gdb" "${NDK}/prebuilt/linux-x86_64/bin/ndk-stack" "${NDK}/prebuilt/linux-x86_64/bin/ndk-which" "${NDK}/simpleperf/inferno.sh" "${NDK_TOOLCHAIN}/bin/lldb.sh"
          cp ${{ github.workspace }}/patches/ndk/scripts/clang-tidy.sh ${NDK_TOOLCHAIN}/bin
          cp ${{ github.workspace }}/patches/ndk/scripts/ndk-which ${NDK}/prebuilt/linux-x86_64/bin

          ## Fix: ERROR: Unknown host CPU architecture: aarch64
          sed -i 's/arm64)/arm64|aarch64)/' "${NDK}/build/tools/ndk_bin_common.sh"

          ## Remove unused resource
          rm -rf "${NDK_TOOLCHAIN}/python3"
          rm -rf "${NDK_TOOLCHAIN}/musl"
          rm -rf "${NDK}/prebuilt/linux-x86_64/bin/*asm"
          rm -rf "${NDK}/prebuilt/linux-x86_64/lib"
          find "${NDK_TOOLCHAIN}/lib" -maxdepth 1 -mindepth 1 -not -name clang -exec rm -rf {} \;
          find "${NDK_TOOLCHAIN}" -maxdepth 5 -path "*/lib/clang/[0-9][0-9]/lib/*" -not -name linux -exec rm -rf {} \;

          cp -R "${HOST_TOOLCHAIN}/lib/clang" "${NDK_TOOLCHAIN}/lib"
          cp -R "${HOST_TOOLCHAIN}/lib/libear" "${NDK_TOOLCHAIN}/lib"
          cp -R "${HOST_TOOLCHAIN}/lib/libscanbuild" "${NDK_TOOLCHAIN}/lib"
          curl -LkSs https://cosmo.zip/pub/cosmos/bin/cmp > "${NDK}/prebuilt/linux-x86_64/bin/cmp" && chmod +x "${NDK}/prebuilt/linux-x86_64/bin/cmp"
          curl -LkSs https://cosmo.zip/pub/cosmos/bin/echo.ape > "${NDK}/prebuilt/linux-x86_64/bin/echo" && chmod +x "${NDK}/prebuilt/linux-x86_64/bin/echo"
          cp $HOME/extra-deps/make "${NDK}/prebuilt/linux-x86_64/bin/make"
          mkdir -p "${NDK_TOOLCHAIN}/python3/bin"
          curl -LkSs https://cosmo.zip/pub/cosmos/bin/python >"${NDK_TOOLCHAIN}/python3/bin/python3" && chmod +x "${NDK_TOOLCHAIN}/python3/bin/python3"
          cp $HOME/extra-deps/yasm "${NDK}/prebuilt/linux-x86_64/bin"
          cp $HOME/extra-deps/ytasm "${NDK}/prebuilt/linux-x86_64/bin"
          cp $HOME/extra-deps/vsyasm "${NDK}/prebuilt/linux-x86_64/bin"
          cp $HOME/extra-deps/yasm "${NDK_TOOLCHAIN}/bin"
          find "${NDK}/shader-tools/linux-x86_64" -type f | while IFS= read -r file; do
             bname="$(basename "${file}")"

             echo "Replacing ${bname}"
             cp "$HOME/extra-deps/${bname}" "${file}" || true
          done

          rm -rf "${NDK}/shader-tools/linux-x86_64/libc++.so"

          cd ${NDK_TOOLCHAIN}/bin
          # idk why but these being symlinked causes issues
          rm -rf llvm-readelf ld64.lld llvm-dlltool ld.lld ld clang++
          cp llvm-readobj llvm-readelf
          cp lld ld64.lld
          cp llvm-ar llvm-dlltool
          cp lld ld.lld
          cp ld.lld ld
          cp clang clang++
          cd $ROOTDIR

          mv ${NDK}/shader-tools/linux-x86_64 ${NDK}/shader-tools/cosmo-universal
          mv ${NDK}/prebuilt/linux-x86_64 ${NDK}/prebuilt/cosmo-universal
          mv ${NDK}/toolchains/llvm/prebuilt/linux-x86_64 ${NDK}/toolchains/llvm/prebuilt/cosmo-universal

          cd $NDK
          /usr/bin/cc ${{ github.workspace }}/sources/package-generator.c -o $HOME/package-generator
          $HOME/package-generator package.xml $(grep '^Pkg\.Revision =' source.properties | cut -d'=' -f2 | tr -d ' ')

      - name: Archive
        run: tar -c android-ndk-r${{inputs.version}}${{inputs.revision}} >android-ndk-r${{inputs.version}}${{inputs.revision}}-unfixed.tar

      - uses: actions/upload-artifact@v4.6.2
        with:
          name: android-ndk-r${{inputs.version}}${{inputs.revision}}-unfixed
          path: android-ndk-r${{inputs.version}}${{inputs.revision}}-unfixed.tar

  windows_fix:
    needs: make
    name: Windows Fix
    runs-on: windows-latest
    steps:
      - uses: milliewalky/setup-7-zip@v2

      - name: Get Unfixed NDK
        uses: actions/download-artifact@v5
        with:
          name: android-ndk-r${{inputs.version}}${{inputs.revision}}-unfixed
          merge-multiple: true

      - name: Extract Unfixed NDK
        run: 7z x android-ndk-r${{inputs.version}}${{inputs.revision}}-unfixed.tar -aoa

      - name: Get Official NDK
        run: |
          echo "Downloading NDK r${{inputs.version}}${{inputs.revision}}..."
          curl -sSfL -o android-ndk.zip "https://dl.google.com/android/repository/android-ndk-r${{inputs.version}}${{inputs.revision}}-windows.zip"
          & "C:\Program Files\Git\usr\bin\unzip.exe" -qq android-ndk.zip -d ${{ runner.temp }}

      - name: Fix Links
        shell: pwsh
        run: |
          function Get-FileType {
              param ([string]$FilePath)
              $fileExePath = "C:\Program Files\Git\usr\bin\file.exe"
              return & "$fileExePath" $FilePath
          }

          $NDK = "$PWD\android-ndk-r${{inputs.version}}${{inputs.revision}}"
          $NDK_TOOLCHAIN = "$NDK\toolchains\llvm\prebuilt\cosmo-universal"
          $MajorVersion = ${{ runner.temp }}\android-ndk-r${{inputs.version}}${{inputs.revision}}\toolchains\llvm\prebuilt\windows-x86_64\bin\clang.exe --version | Select-String -Pattern 'clang version (\d+)' | ForEach-Object { $_.Matches.Groups[1].Value }

          foreach ($file in Get-ChildItem -Path "$NDK_TOOLCHAIN\bin" -File) {
              $bname = $file.Name
              $fileType = Get-FileType $file.FullName

              if ($fileType -match "symbolic link to `(.*`)") {
                  $targetFile = $matches[1].Trim()

                  Write-Host "Hard linking $bname"
                  Remove-Item $file.FullName -Force

                  $targetPath = "$NDK_TOOLCHAIN\bin\$targetFile"
                  if (Test-Path "$targetPath") {
                      Copy-Item -Path "$targetPath" -Destination $file.FullName -Force
                  } else {
                      Write-Host "$targetFile does not exist skip"
                  }
              }
          }

          foreach ($file in Get-ChildItem -Path "$NDK_TOOLCHAIN\bin" -File) {
              $bname = $file.Name
              $fileType = Get-FileType $file.FullName

              if ($fileType -match "DOS/MBR boot sector") {
                  Write-Host "Renaming $bname"
                  Rename-Item -Path $file.FullName -NewName "$($file.FullName).exe"
              }
              elseif ($fileType -match "a sh script") {
                  Write-Host "Replacing Shell Script $bname"
                  Copy-Item -Path ${{ runner.temp }}\android-ndk-r${{inputs.version}}${{inputs.revision}}\toolchains\llvm\prebuilt\windows-x86_64\bin\$($file.Name) -Destination $file.FullName -Force
                  Copy-Item -Path "${{ runner.temp }}\android-ndk-r${{inputs.version}}${{inputs.revision}}\toolchains\llvm\prebuilt\windows-x86_64\bin\$($file.Name).cmd" -Destination "$($file.FullName).cmd" -Force 
              }
          }

          foreach ($file in Get-ChildItem -Path "$NDK\shader-tools\cosmo-universal" -File) {
              $bname = $file.Name
              $fileType = Get-FileType $file.FullName

              if ($fileType -match "DOS/MBR boot sector" -and -not ($fileType -match "a sh script")) {
                  Write-Host "Renaming $bname"
                  Rename-Item -Path $file.FullName -NewName "$($file.FullName).exe"
              }
          }

          Write-Host "Running Extra Fixes..."
          Remove-Item "$NDK\ndk-build"
          Copy-Item -Path "${{ runner.temp }}\android-ndk-r${{inputs.version}}${{inputs.revision}}\ndk-build.cmd" -Destination "$NDK\ndk-build.cmd" -Force 
          Remove-Item "$NDK\ndk-gdb"
          Copy-Item -Path "${{ runner.temp }}\android-ndk-r${{inputs.version}}${{inputs.revision}}\ndk-gdb.cmd" -Destination "$NDK\ndk-gdb.cmd" -Force 
          Remove-Item "$NDK\ndk-lldb"
          Remove-Item "$NDK\ndk-stack"
          Copy-Item -Path "${{ runner.temp }}\android-ndk-r${{inputs.version}}${{inputs.revision}}\ndk-stack.cmd" -Destination "$NDK\ndk-stack.cmd" -Force
          Remove-Item "$NDK\ndk-which"
          Copy-Item -Path "${{ runner.temp }}\android-ndk-r${{inputs.version}}${{inputs.revision}}\ndk-which.cmd" -Destination "$NDK\ndk-which.cmd" -Force
          Remove-Item "$NDK\prebuilt\cosmo-universal\bin\ndk-gdb"
          Copy-Item -Path "${{ runner.temp }}\android-ndk-r${{inputs.version}}${{inputs.revision}}\prebuilt\windows-x86_64\bin\ndk-gdb.cmd" -Destination "$NDK\prebuilt\cosmo-universal\bin\ndk-gdb.cmd" -Force
          Remove-Item "$NDK\prebuilt\cosmo-universal\bin\ndk-stack"
          Copy-Item -Path "${{ runner.temp }}\android-ndk-r${{inputs.version}}${{inputs.revision}}\prebuilt\windows-x86_64\bin\ndk-stack.cmd" -Destination "$NDK\prebuilt\cosmo-universal\bin\ndk-stack.cmd" -Force
          Remove-Item "$NDK_TOOLCHAIN\bin\clang-$MajorVersion.exe"
          Remove-Item "$NDK_TOOLCHAIN\bin\ld64.lld.exe"
          Remove-Item "$NDK_TOOLCHAIN\bin\lld-link.exe"
          Remove-Item "$NDK_TOOLCHAIN\bin\lld.exe"
          Rename-Item -Path "$NDK\prebuilt\cosmo-universal\bin\cmp" -NewName "$NDK\prebuilt\cosmo-universal\bin\cmp.exe"
          Rename-Item -Path "$NDK\prebuilt\cosmo-universal\bin\echo" -NewName "$NDK\prebuilt\cosmo-universal\bin\echo.exe"
          Rename-Item -Path "$NDK\prebuilt\cosmo-universal\bin\make" -NewName "$NDK\prebuilt\cosmo-universal\bin\make.exe"
          Rename-Item -Path "$NDK\prebuilt\cosmo-universal\bin\yasm" -NewName "$NDK\prebuilt\cosmo-universal\bin\yasm.exe"
          Rename-Item -Path "$NDK\prebuilt\cosmo-universal\bin\ytasm" -NewName "$NDK\prebuilt\cosmo-universal\bin\ytasm.exe"
          Rename-Item -Path "$NDK\prebuilt\cosmo-universal\bin\vsyasm" -NewName "$NDK\prebuilt\cosmo-universal\bin\vsyasm.exe"
          Copy-Item -Path "$NDK_TOOLCHAIN\python3\bin\python3" -Destination "$NDK_TOOLCHAIN\python3\python.exe" -Force
          Remove-Item "$NDK_TOOLCHAIN\python3\bin" -Recurse -Force
          Rename-Item -Path "$NDK_TOOLCHAIN\bin\ld.lld.exe" -NewName "$NDK_TOOLCHAIN\bin\ld.lld"
          Copy-Item -Path "$NDK_TOOLCHAIN\bin\clang.exe" -Destination "$NDK_TOOLCHAIN\bin\clang-cl.exe" -Force
          cd ${NDK}\toolchains\llvm\prebuilt
          Rename-Item -Path "cosmo-universal" -NewName "windows-x86_64"
          cd ${NDK}\prebuilt
          Rename-Item -Path "cosmo-universal" -NewName "windows-x86_64"
          cd ${NDK}\shader-tools
          Rename-Item -Path "cosmo-universal" -NewName "windows-x86_64"

      - name: Archive Fixed NDK
        run: 7z a -snl -t7z -mx=9 -m0=LZMA2 -md=256m -mfb=273 -mtc=on -mmt=on android-ndk-r${{inputs.version}}${{inputs.revision}}-windows-ape.7z android-ndk-r${{inputs.version}}${{inputs.revision}}

      - name: Upload Fixed NDK
        uses: actions/upload-artifact@v4.6.2
        with:
          name: android-ndk-r${{inputs.version}}${{inputs.revision}}-windows-ape
          path: android-ndk-r${{inputs.version}}${{inputs.revision}}-windows-ape.7z

  unix_fix:
    needs: make
    name: Unix Fix
    runs-on: ubuntu-latest
    steps:
      - name: Get Unfixed NDK
        uses: actions/download-artifact@v5
        with:
          name: android-ndk-r${{inputs.version}}${{inputs.revision}}-unfixed
          merge-multiple: true

      - name: Extract Unfixed NDK
        run: tar -xf android-ndk-r${{inputs.version}}${{inputs.revision}}-unfixed.tar

      - name: Fix Links
        run: |
          NDK="${PWD}/android-ndk-r${{inputs.version}}${{inputs.revision}}"
          NDK_TOOLCHAIN="${NDK}/toolchains/llvm/prebuilt/cosmo-universal"

          cd ${NDK}/toolchains/llvm/prebuilt

          ln -s cosmo-universal linux-x86_64
          ln -s cosmo-universal linux-arm64
          ln -s cosmo-universal darwin-x86_64
          ln -s cosmo-universal darwin-arm64

          cd ${NDK}/prebuilt

          ln -s cosmo-universal linux-x86_64
          ln -s cosmo-universal linux-arm64
          ln -s cosmo-universal darwin-x86_64
          ln -s cosmo-universal darwin-arm64

          cd ${NDK}/shader-tools

          ln -s cosmo-universal linux-x86_64
          ln -s cosmo-universal linux-arm64
          ln -s cosmo-universal darwin-x86_64
          ln -s cosmo-universal darwin-arm64

      - name: Archive Fixed NDK
        run: tar -cf - android-ndk-r${{inputs.version}}${{inputs.revision}} | xz -T0 -9e --lzma2=dict=256MiB > android-ndk-r${{inputs.version}}${{inputs.revision}}-unix-ape.tar.xz

      - name: Upload Fixed NDK
        uses: actions/upload-artifact@v4.6.2
        with:
          name: android-ndk-r${{inputs.version}}${{inputs.revision}}-unix-ape
          path: android-ndk-r${{inputs.version}}${{inputs.revision}}-unix-ape.tar.xz

  release:
    needs: [unix_fix, windows_fix]
    name: Release
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    steps:
    - uses: geekyeggo/delete-artifact@v5.1.0
      with:
        name: android-ndk-r${{inputs.version}}${{inputs.revision}}-unfixed

    - name: Download artifacts
      uses: actions/download-artifact@v5
      with:
        merge-multiple: true

    - name: Release
      uses: ncipollo/release-action@v1.20.0
      with:
        name: "r${{inputs.version}}${{inputs.revision}}"
        tag: "r${{inputs.version}}"
        artifacts: android-ndk-r${{inputs.version}}${{inputs.revision}}*
        allowUpdates: true
        replacesArtifacts: true
        body: ''
